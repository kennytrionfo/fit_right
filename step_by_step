Step by step instructions on how to build fit_right app in ruby on rails. 

Create a new rails app and skip test unit in the installation: 
	rails new fit_right --skip-test-unit
	should see rails create a bunch of files & directories for you and then bundle instal for you too. 

CD into app in console and start server to make sure it's working in browser: 
	cd fit_right
	rails server
	in browswer: localhost:3000
	should get the Welcome Aboard rails screen

Initialize a repository on your machine and create a remote repo on github and sync them:
	git init
	git add .
	git commit -m "first commit"
	Go create the repo on github
	git remote add origin https://github.com/kennytrionfo/fit_right.git
	git push -u origin master

Open app in text editor, edit readme file if u like, start step by step instructions file if you like.

System check: Check ur Rubies, versions and gems. i.e. rvm, ruby, rails, bundle, gems etc. 
	rvm list
	rvm getset
	ruby -v
	rails -v

Install minitest gem: 
	In Gemfile: 
	group :test, :development do
  	gem "minitest-rails"
	end
	Check for the minitest generator in console with: 
	rails generate
	Install the gem with this from the console:
	rails g minitest:install
	Should see a test folder now in ur app in text editor. 

PUT TESTING IN HERE ALONG THE WAY!
	
Create first model with controllers, views and test files: 
	rails g scaffold todo_list title:string description:text
	then

rake db:migrate

Confirm in localhost:3000/todo_list

Change root to point to the todo_lists controller and the index action: 
	In routes.rb file: 
	root "todo_lists#index"
	Check localhost:3000 in browser. Should show all the lists without need to go to /todo_lists

Generate a model for our todo items with a content row/attribute that's a string and that references the todo_list: 
	With: 
	rails g model todo_item content:string todo_list:references 

rake db:migrate

Tell the todo_list model that it has many todo_items: 
	In the todo_list.rb file: 
	has_many :todo_items

Create some nested routes for our todo_items: 
	In routes.rb file, make todo_lists resources a block with todo_items resources inside:  
	resources :todo_lists do
		resources :todo_items
	end

Look at the routes this created: 
	With: 
	rake routes

Generate a controller for your todo_item: 
	rails g controller todo_items

Give yourself the ability to create new todo lists with new todo items: 
	In todo_items_controller.rb, create a create method that creates a new todo_list variable/instance by setting it to a new TodoList that you find by the todo_list_id key. 
	Then create a method that creates a new todo item by .. 
		@todo_list = TodoList.find(params[:todo_list_id])
		@todo_item = @todo_list.todo_items.create(params[:todo_item].permit(:content))










